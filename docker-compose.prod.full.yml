version: "3.8"
services:

  traefik:
    image: traefik:v2.2
    container_name: traefik
    env_file:
      - .prod.full.env
    command:
      - --debug=false
      - --api.insecure=false
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --docker.domain=hhparser.awkr.site
      - --docker.endpoint=unix:///var/run/docker.sock
      - --accesslog
      - --log
      - --api
      - --defaultentrypoints=https,http
      - --entryPoints=Name:http Address::80 Redirect.EntryPoint:https
      - --entryPoints=Name:https Address::443 TLS
      - --retry
      - --acme.email=terr.kuzyashin@gmail.com
      - --acme.storage=acme.json
      - --acme.entryPoint=https
      - --acme.onHostRule=true
      - --acme.httpchallenge.entrypoint=http
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`traefik.${DOMAIN?Variable not set}`)
      - traefik.http.routers.api.service=api@internal
      - traefik.http.routers.api.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=awaker:$$apr1$$fjUPC25L$$eXYA/ozckyqZTVN1WDGVY0
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /docker/traefik/traefik.toml:/traefik.toml
      - /docker/traefik/acme.json:/acme.json


  backend:
    image: backend:latest-prod-full
    depends_on:
      - db
    env_file:
      - .prod.full.env
    build:
      context: .
      dockerfile: backend.Dockerfile
    ports:
      - 8000
    volumes:
      - ./app:/app
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`backend.${DOMAIN?Variable not set}`)
      - traefik.http.routers.backend.entrypoints=http,https
      - traefik.http.services.backend.loadbalancer.server.port=8000

  celery:
    image: celery:latest-prod-full
    env_file:
      - .prod.full.env
    build:
      context: .
      dockerfile: celery.Dockerfile
    ports:
      - 8000
    depends_on:
      - backend
    volumes:
      - ./app:/app

  flower:
    image: flower:latest-prod-full
    container_name: flower
    build:
      context: .
      dockerfile: flower.Dockerfile
    env_file:
      - .prod.full.env
    volumes:
      - ./app:/app
    ports:
      - 8888
    labels:
      - traefik.enable=true
      - traefik.http.routers.flower.rule=Host(`flower.${DOMAIN?Variable not set}`)
      - traefik.http.routers.flower.entrypoints=http,https
      - traefik.http.services.flower.loadbalancer.server.port=8888

  redis:
    image: redis
    container_name: redis
    env_file:
      - .prod.full.env
    command: [ "redis-server", "/docker/redis/redis.conf" ]

    ports:
      - 6379

    volumes:
      - ./docker/redis/redis-data:/data/bases
      - ./docker/redis/redis.conf:/docker/redis/redis.conf
      - ./docker/redis/log:/docker/redis/log

  rabbitmq:
    image: rabbitmq:3.8.4-management
    container_name: rabbitmq
    env_file:
      - .prod.full.env
    volumes:
      - ./docker/rabbitmq/etc/:/etc/rabbitmq/
      - ./docker/rabbitmq/data/:/var/lib/rabbitmq/
      - ./docker/rabbitmq/logs/:/var/log/rabbitmq/
    ports:
      - 5672
      - 15672
    labels:
      - traefik.enable=true
      - traefik.http.routers.rabbit.rule=Host(`rabbit.${DOMAIN?Variable not set}`)
      - traefik.http.routers.rabbit.entrypoints=http,https
      - traefik.http.services.rabbit.loadbalancer.server.port=15672

  db:
    image: postgres:12
    volumes:
      - ./docker/postgres/:/var/lib/postgresql/data/pgdata
    env_file:
      - .prod.full.env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata


  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - db
    env_file:
      - .prod.full.env
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
      - traefik.http.routers.pgadmin.entrypoints=http,https
      - traefik.http.services.pgadmin.loadbalancer.server.port=5050
